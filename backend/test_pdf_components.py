#!/usr/bin/env python3
"""
Quick test to verify all PDF integration components are working.
"""
import asyncio
import uuid
from datetime import datetime

async def test_pdf_components():
    """Test that all PDF components are properly integrated."""
    print("üß™ Testing PDF Storage Integration Components...")
    
    try:
        # Test 1: File Storage Service
        print("\n1. Testing File Storage Service...")
        from services.file_storage_service import get_file_storage_service
        storage = get_file_storage_service()
        await storage.initialize()
        print("‚úì File storage service initialized")
        
        # Test 2: Document Service
        print("\n2. Testing Document Service...")
        from database.service import get_document_service
        doc_service = get_document_service()
        
        # Check that all required methods exist
        required_methods = [
            'store_pdf_file',  # Document-based PDF storage
            'get_pdf_file_stream',  # Document-based PDF streaming
            'has_pdf_file',  # Check if document has PDF
            'delete_document_for_user'  # Delete with PDF cleanup
        ]
        
        for method in required_methods:
            if hasattr(doc_service, method):
                print(f"‚úì Method {method} exists")
            else:
                print(f"‚úó Method {method} missing")
                return False
        
        # Test 3: Router endpoints exist
        print("\n3. Testing Router Integration...")
        from routers.analysis import router as analysis_router
        from routers.documents import router as documents_router
        
        # Check analysis router has upload endpoint
        analysis_routes = [route.path for route in analysis_router.routes]
        if "/analyze/" in analysis_routes:
            print("‚úì Analysis upload endpoint exists")
        else:
            print("‚úó Analysis upload endpoint missing")
            return False
        
        # Check documents router has PDF endpoints
        doc_routes = [route.path for route in documents_router.routes]
        pdf_endpoints = [
            "/documents/{document_id}/pdf",
            "/documents/{document_id}/pdf/metadata"
        ]
        
        for endpoint in pdf_endpoints:
            if endpoint in doc_routes:
                print(f"‚úì PDF endpoint {endpoint} exists")
            else:
                print(f"‚úó PDF endpoint {endpoint} missing")
                return False
        
        # Test 4: Quick functional test
        print("\n4. Testing Core Functionality...")
        user_id = str(uuid.uuid4())
        document_id = str(uuid.uuid4())
        test_content = b"Test PDF content for component validation"
        
        # Create a test document
        document_data = {
            "id": document_id,
            "filename": "test.pdf",
            "upload_date": datetime.now().isoformat(),
            "text": "Test content",
            "user_id": user_id,
            "clauses": [],
            "risk_summary": {"high": 0, "medium": 0, "low": 0}
        }
        
        await doc_service.save_document_for_user(document_data, user_id)
        print("‚úì Document saved")
        
        # Store PDF
        pdf_stored = await doc_service.store_pdf_file(
            document_id=document_id,
            user_id=user_id,
            file_data=test_content,
            filename="test.pdf"
        )
        
        if pdf_stored:
            print("‚úì PDF stored successfully")
        else:
            print("‚úó PDF storage failed")
            return False
        
        # Check PDF exists
        has_pdf = await doc_service.has_pdf_file(document_id, user_id)
        if has_pdf:
            print("‚úì PDF existence check passed")
        else:
            print("‚úó PDF existence check failed")
            return False
        
        # Get PDF stream
        metadata, stream = await doc_service.get_pdf_file_stream(document_id, user_id)
        if metadata and stream:
            print("‚úì PDF stream retrieval successful")
            
            # Verify content
            content_chunks = []
            async for chunk in stream:
                content_chunks.append(chunk)
            retrieved_content = b''.join(content_chunks)
            
            if retrieved_content == test_content:
                print("‚úì PDF content verification passed")
            else:
                print("‚úó PDF content verification failed")
                return False
        else:
            print("‚úó PDF stream retrieval failed")
            return False
        
        # Clean up
        deleted = await doc_service.delete_document_for_user(document_id, user_id)
        if deleted:
            print("‚úì Document and PDF cleanup successful")
        else:
            print("‚úó Document cleanup failed")
        
        print("\nüéâ All PDF integration components are working correctly!")
        print("\nüìã Integration Status:")
        print("‚úÖ PDF storage in MongoDB GridFS")
        print("‚úÖ User isolation and security")
        print("‚úÖ Document upload with PDF storage")
        print("‚úÖ PDF download endpoints")
        print("‚úÖ PDF metadata endpoints")
        print("‚úÖ Streaming download support")
        print("‚úÖ Automatic PDF cleanup on document deletion")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Component test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_pdf_components())
