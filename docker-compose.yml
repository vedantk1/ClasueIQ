version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: legal_ai_mongodb
    environment:
      MONGO_INITDB_DATABASE: legal_ai
    volumes:
      - mongodb_data:/data/db
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legal_ai_backend
    environment:
      # MongoDB configuration
      MONGODB_URI: mongodb://mongodb:27017
      MONGODB_DATABASE: legal_ai
      MONGODB_COLLECTION: documents

      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Server configuration
      HOST: 0.0.0.0
      PORT: 8000

      # CORS configuration
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000

      # File upload configuration
      MAX_FILE_SIZE_MB: 10
      ALLOWED_FILE_TYPES: .pdf

      # Storage configuration
      STORAGE_DIR: /app/documents_storage
    volumes:
      - documents_storage:/app/documents_storage
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: legal_ai_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_MAX_FILE_SIZE_MB: 10
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: legal_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal_ai_network

volumes:
  mongodb_data:
    driver: local
  documents_storage:
    driver: local
  redis_data:
    driver: local

networks:
  legal_ai_network:
    driver: bridge
